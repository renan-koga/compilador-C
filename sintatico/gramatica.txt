PROGRAMA -> DECL PROG1
PROGRAMA -> FUNC PROG1
PROG1 -> PROGRAMA
PROG1 -> EPSILON

DECL -> # define id EXP
DECL -> DECL_VAR
DECL -> DECL_PROT

FUNC -> TIPO FUNC1
FUNC1 -> * FUNC1
FUNC1 -> id PARAM { FUNC2
FUNC2 -> DECL_VAR FUNC2
FUNC2 -> COMANDOS }

DECL_VAR -> TIPO DECL_VAR1
DECL_VAR1 -> * DECL_VAR1
DECL_VAR1 -> id DECL_VAR2
DECL_VAR2 -> [ EXP ] DECL_VAR2
DECL_VAR2 -> = EXP_ATR DECL_VAR3
DECL_VAR2 -> DECL_VAR3
DECL_VAR3 -> , DECL_VAR1
DECL_VAR3 -> ;

DECL_PROT -> TIPO DECL_PROT1
DECL_PROT1 -> * DECL_PROT1
DECL_PROT1 -> id PARAM ;

PARAM -> ( PARAM1
PARAM1 -> TIPO PARAM2
PARAM1 -> )
PARAM2 -> * PARAM2
PARAM2 -> id PARAM3
PARAM3 -> [ EXP ] PARAM3
PARAM3 -> , TIPO PARAM2
PARAM3 -> )

TIPO -> int
TIPO -> char
TIPO -> void

BLOCO -> { COMANDOS }

COMANDOS -> LIST_COMANDOS COMANDOS
COMANDOS -> EPSILON

LIST_COMANDOS -> do BLOCO while ( EXP ) ;
LIST_COMANDOS -> if ( EXP ) BLOCO LIST_COMANDOS1
LIST_COMANDOS -> while ( EXP ) BLOCO
LIST_COMANDOS -> for ( LIST_COMANDOS2
LIST_COMANDOS -> printf ( string LIST_COMANDOS5
LIST_COMANDOS -> scanf ( string , & id ) ;
LIST_COMANDOS -> exit ( EXP ) ;
LIST_COMANDOS -> return LIST_COMANDOS6
LIST_COMANDOS -> EXP ;
LIST_COMANDOS -> ;
LIST_COMANDOS -> BLOCO
LIST_COMANDOS1 -> else BLOCO
LIST_COMANDOS1 -> EPSILON
LIST_COMANDOS2 -> ; LIST_COMANDOS3
LIST_COMANDOS2 -> EXP ; LIST_COMANDOS3
LIST_COMANDOS3 -> ; LIST_COMANDOS4
LIST_COMANDOS3 -> EXP ; LIST_COMANDOS4
LIST_COMANDOS4 -> ) BLOCO
LIST_COMANDOS4 -> EXP ) BLOCO
LIST_COMANDOS5 -> ) ;
LIST_COMANDOS5 -> , EXP ) ;
LIST_COMANDOS6 -> ;
LIST_COMANDOS6 -> EXP ;

EXP -> EXP_ATR EXP1
EXP1 -> , EXP_ATR EXP1
EXP1 -> EPSILON

EXP_ATR -> EXP_COND
EXP_ATR -> EXP_UNARIA EXP_ATR1
EXP_ATR1 -> = EXP_ATR
EXP_ATR1 -> += EXP_ATR
EXP_ATR1 -> -= EXP_ATR

EXP_COND -> EXP_OR_LOGIC EXP_COND1
EXP_COND1 -> ? EXP : EXP_COND
EXP_COND1 -> EPSILON

EXP_OR_LOGIC -> EXP_AND_LOGIC EXP_OR_LOGIC1
EXP_OR_LOGIC1 -> || EXP_AND_LOGIC EXP_OR_LOGIC1
EXP_OR_LOGIC1 -> EPSILON

EXP_AND_LOGIC -> EXP_OR EXP_AND_LOGIC1
EXP_AND_LOGIC1 -> && EXP_OR EXP_AND_LOGIC1
EXP_AND_LOGIC1 -> EPSILON

EXP_OR -> EXP_XOR EXP_OR1
EXP_OR1 -> | EXP_XOR EXP_OR1
EXP_OR1 -> EPSILON

EXP_XOR -> EXP_AND EXP_XOR1
EXP_XOR1 -> ^ EXP_AND EXP_XOR1
EXP_XOR1 -> EPSILON

EXP_AND -> EXP_EQUAL EXP_AND1
EXP_AND1 -> & EXP_EQUAL EXP_AND1
EXP_AND1 -> EPSILON

EXP_EQUAL -> EXP_REL EXP_EQUAL1
EXP_EQUAL1 -> == EXP_REL EXP_EQUAL1
EXP_EQUAL1 -> EXP_EQUAL2
EXP_EQUAL2 -> != EXP_REL EXP_EQUAL1
EXP_EQUAL2 -> EPSILON

EXP_REL -> EXP_SHIFT EXP_REL1
EXP_REL1 -> < EXP_SHIFT EXP_REL1
EXP_REL1 -> EXP_REL2
EXP_REL2 -> <= EXP_SHIFT EXP_REL1
EXP_REL2 -> EXP_REL3
EXP_REL3 -> > EXP_SHIFT EXP_REL1
EXP_REL3 -> EXP_REL4
EXP_REL4 -> >= EXP_SHIFT EXP_REL1
EXP_REL4 -> EPSILON

EXP_SHIFT -> EXP_ADD EXP_SHIFT1
EXP_SHIFT1 -> << EXP_ADD EXP_SHIFT1
EXP_SHIFT1 -> EXP_SHIFT2
EXP_SHIFT2 -> >> EXP_ADD EXP_SHIFT1
EXP_SHIFT2 -> EPSILON

EXP_ADD -> EXP_MUL EXP_ADD1
EXP_ADD1 -> - EXP_MUL EXP_ADD1
EXP_ADD1 -> EXP_ADD2
EXP_ADD2 -> + EXP_MUL EXP_ADD1
EXP_ADD2 -> EPSILON

EXP_MUL -> EXP_CAST EXP_MUL1
EXP_MUL1 -> * EXP_CAST EXP_MUL1
EXP_MUL1 -> EXP_MUL2
EXP_MUL2 -> / EXP_CAST EXP_MUL1
EXP_MUL2 -> EXP_MUL3
EXP_MUL3 -> % EXP_CAST EXP_MUL1
EXP_MUL3 -> EPSILON

EXP_CAST -> EXP_UNARIA
EXP_CAST -> ( TIPO EXP_CAST1
EXP_CAST1 -> * EXP_CAST1
EXP_CAST1 -> ) EXP_CAST

EXP_UNARIA -> EXP_POS_FIXA
EXP_UNARIA -> ++ EXP_UNARIA
EXP_UNARIA -> -- EXP_UNARIA
EXP_UNARIA -> & EXP_CAST
EXP_UNARIA -> * EXP_CAST
EXP_UNARIA -> + EXP_CAST
EXP_UNARIA -> - EXP_CAST
EXP_UNARIA -> ~ EXP_CAST
EXP_UNARIA -> ! EXP_CAST

EXP_POS_FIXA -> EXP_PRIMARIA
EXP_POS_FIXA -> EXP_POS_FIXA EXP_POS_FIXA1
EXP_POS_FIXA1 -> [ EXP ]
EXP_POS_FIXA1 -> ++
EXP_POS_FIXA1 -> --
EXP_POS_FIXA1 -> ( EXP_POS_FIXA2
EXP_POS_FIXA2 -> EXP_ATR EXP_POS_FIXA3
EXP_POS_FIXA2 -> )
EXP_POS_FIXA3 -> , EXP_ATR EXP_POS_FIXA3
EXP_POS_FIXA3 -> )

EXP_PRIMARIA -> id
EXP_PRIMARIA -> NUM
EXP_PRIMARIA -> caracter
EXP_PRIMARIA -> string
EXP_PRIMARIA -> ( EXP )

NUM -> NUM_integer
NUM -> NUM_HEXA
NUM -> NUM_OCTAL